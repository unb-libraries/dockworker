name: Deployment Workflow

on:
  workflow_call:
    secrets:
      GH_CONTAINER_REGISTRY_TOKEN:
        required: true
      GH_CONTAINER_REGISTRY_USER:
        required: true
      KUBE_CONFIG_DATA:
        required: true
      NEW_RELIC_ACCOUNT_ID:
        required: true
      NEW_RELIC_API_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  slack-start:
    name: Notify Slack of Testing Start
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,commit,repo,author,action,message
          custom_payload: |
            {
              attachments: [{
                color: 'warning',
                text: `${process.env.AS_REPO} ${process.env.CI_REF_NAME} - Build Started :shipit: (${process.env.AS_ACTION})\n${process.env.AS_COMMIT} ${process.env.AS_MESSAGE}\n${process.env.AS_AUTHOR}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  set-deployment-image-tag:
    name: Set deployment image tag
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      -
        name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDDHHMMSS
      -
        name: Set Tag
        env:
          TIMESTAMP: "${{ steps.current-time.outputs.formattedTime }}"
        run: echo "BUILD_IMAGE_TAG=$CI_SHA_SHORT-$TIMESTAMP" > /tmp/image_tag.env
      -
        name: Display Tag
        run: cat /tmp/image_tag.env
      -
        uses: actions/upload-artifact@v2
        with:
          name: build-image-tag
          path: /tmp/image_tag.env

  build-image:
    name: Build Image
    needs: [set-deployment-image-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: actions/checkout@v2
      -
        name: Retrieve Image Tag
        uses: actions/download-artifact@v2
        with:
          name: build-image-tag
          path: /tmp
      -
        name: Set Image Tag
        run: cat /tmp/image_tag.env >> $GITHUB_ENV
      -
        name: Get current time
        uses: gerred/actions/current-time@master
        id: current-time
      - uses: unb-libraries/install-dockworker-composite-action@v2
      -
        name: Build Themes
        run: vendor/bin/dockworker theme:build-all
      -
        name: Build Docker Image
        env:
          TIMESTAMP: "${{ steps.current-time.outputs.time }}"
        run: |
          docker build \
            --build-arg BUILD_DATE=$TIMESTAMP \
            --build-arg VCS_REF=$CI_REF_NAME \
            --build-arg VERSION=$BUILD_IMAGE_TAG \
            --tag "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$BUILD_IMAGE_TAG" \
            .
      -
        name: Login to GHCR
        run: echo $GH_CONTAINER_REGISTRY_TOKEN | docker login ghcr.io -u $GH_CONTAINER_REGISTRY_USER --password-stdin
        env:
          GH_CONTAINER_REGISTRY_TOKEN: ${{secrets.GH_CONTAINER_REGISTRY_TOKEN}}
          GH_CONTAINER_REGISTRY_USER: ${{secrets.GH_CONTAINER_REGISTRY_USER}}
      -
        name: Push Image to GHCR
        run: docker push "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$BUILD_IMAGE_TAG"

  update-docker-compose:
    name: Update Docker Compose
    needs: [set-deployment-image-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: actions/checkout@v2
      -
        name: Retrieve Image Tag
        uses: actions/download-artifact@v2
        with:
          name: build-image-tag
          path: /tmp
      -
        name: Set Image Tag
        run: cat /tmp/image_tag.env >> $GITHUB_ENV
      -
        name: Remove build section from docker-compose
        run: docker run --rm --env "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME" -v "${PWD}":/workdir mikefarah/yq:3.3.4 yq delete --inplace docker-compose.yml "services[$CI_REPOSITORY_NAME].build"
      -
        name: Add new image section with built image
        run: docker run --rm --env "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME" -v "${PWD}":/workdir mikefarah/yq:3.3.4 yq write --inplace docker-compose.yml "services[$CI_REPOSITORY_NAME].image" "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$BUILD_IMAGE_TAG"
      -
        name: Upload docker-compose.yml
        uses: actions/upload-artifact@v2
        with:
          name: docker-compose
          path: ./docker-compose.yml

  start-install-application:
    name: Start-Up Application
    runs-on: ubuntu-latest
    needs: [build-image, update-docker-compose]
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: actions/checkout@v2
      - uses: unb-libraries/install-dockworker-composite-action@v2
      -
        name: Download docker-compose
        uses: actions/download-artifact@v2
        with:
          name: docker-compose
      -
        name: Login to GHCR
        run: echo $GH_CONTAINER_REGISTRY_TOKEN | docker login ghcr.io -u $GH_CONTAINER_REGISTRY_USER --password-stdin
        env:
          GH_CONTAINER_REGISTRY_TOKEN: ${{secrets.GH_CONTAINER_REGISTRY_TOKEN}}
          GH_CONTAINER_REGISTRY_USER: ${{secrets.GH_CONTAINER_REGISTRY_USER}}
      -
        name: Pull Required Docker Images
        run: docker-compose pull --parallel --quiet
      -
        name: Start container and check logs for errors
        run: vendor/bin/dockworker local:start --no-tail-logs --only-start --force-recreate

  push-branch-tag-image-repository:
    name: Push Branch Tag to Repository
    runs-on: ubuntu-latest
    needs: [start-install-application]
    if:
      contains('
      refs/heads/dev
      refs/heads/prod
      ', github.ref)
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      -
        name: Login to GHCR
        run: echo $GH_CONTAINER_REGISTRY_TOKEN | docker login ghcr.io -u $GH_CONTAINER_REGISTRY_USER --password-stdin
        env:
          GH_CONTAINER_REGISTRY_TOKEN: ${{secrets.GH_CONTAINER_REGISTRY_TOKEN}}
          GH_CONTAINER_REGISTRY_USER: ${{secrets.GH_CONTAINER_REGISTRY_USER}}
      -
        name: Retrieve Image Tag
        uses: actions/download-artifact@v2
        with:
          name: build-image-tag
          path: /tmp
      -
        name: Set Image Tag
        run: cat /tmp/image_tag.env >> $GITHUB_ENV
      -
        name: Pull Hash Tagged Image
        run: docker pull "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$BUILD_IMAGE_TAG"
      -
        name: Update Branch Tag
        run: docker image tag "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$BUILD_IMAGE_TAG" "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$CI_REF_NAME"
      -
        name: Push Branch Tag
        run: docker push "ghcr.io/$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME:$CI_REF_NAME"

  deploy-live:
    name: Deploy Image to Cluster
    runs-on: ubuntu-latest
    needs: [push-branch-tag-image-repository]
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: actions/checkout@v2
      - uses: unb-libraries/install-dockworker-composite-action@v2
      - uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.23.1'
        id: install-kubectl
      - uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
        id: setcontext-kubectl
      -
        name: Retrieve Image Tag
        uses: actions/download-artifact@v2
        with:
          name: build-image-tag
          path: /tmp
      -
        name: Set Image Tag
        run: cat /tmp/image_tag.env >> $GITHUB_ENV
      -
        name: Deploy image to cluster
        run: vendor/bin/dockworker image:deploy $CI_REF_NAME --use-tag $BUILD_IMAGE_TAG
        env:
          GH_CONTAINER_REGISTRY_TOKEN: ${{secrets.GH_CONTAINER_REGISTRY_TOKEN}}
          GH_CONTAINER_REGISTRY_USER: ${{secrets.GH_CONTAINER_REGISTRY_USER}}
      -
        name: Check container startup logs for errors
        run: vendor/bin/dockworker deployment:logs:check $CI_REF_NAME
      -
        name: Write out deployment logs
        run: vendor/bin/dockworker deployment:logs $CI_REF_NAME

  slack-results:
    name: Notify Slack of Build Results
    runs-on: ubuntu-latest
    needs: [deploy-live]
    if: always()
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set environment variables
        run: |
          if [[ ${{ env.WORKFLOW_CONCLUSION }} == success ]]; then
            echo 'DEPLOY_EMOJI=:rocket:' >> $GITHUB_ENV
          else
            echo 'DEPLOY_EMOJI=:boom:' >> $GITHUB_ENV
          fi
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          job_name:
          fields: workflow,job,commit,repo,ref,author,action,message
          custom_payload: |
            {
              attachments: [{
                color: '${{ env.WORKFLOW_CONCLUSION }}' === 'success' ? 'good' : '${{ env.WORKFLOW_CONCLUSION }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_REPO} ${process.env.CI_REF_NAME} - ${{ env.WORKFLOW_CONCLUSION }} ${{ env.DEPLOY_EMOJI }} (${process.env.AS_ACTION})\n${process.env.AS_COMMIT} ${process.env.AS_MESSAGE}\n${process.env.AS_AUTHOR}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
