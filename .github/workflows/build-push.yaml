name: Build Image and Push To Registry

on:
  workflow_call:
    inputs:
      build-themes:
        description: 'Whether or not to build application themes using dockworker before building the image.'
        required: false
        type: boolean
        default: false
      cleanup-old-images:
        description: 'Whether or not to cleanup legacy hash-tagged images from the container registry.'
        required: false
        type: boolean
        default: true
      image-name:
        description: 'The full, repository namespaced image name to build (without the tag).'
        required: true
        type: string
      protected-tags:
        description: 'A list of tags whose container images should be protected from deletion in cleanup. This is in addition to push-branches, which are always protected. CSV format.'
        required: false
        type: string
        default: ''
      push-branches:
        description: 'A list of branches that should be pushed to the container registry. JSON list format.'
        required: true
        type: string
      push-all-branches:
        description: 'Whether or not to push all branches, ignoring the push-branches input.'
        required: false
        type: boolean
        default: false
      platforms:
        description: "A comma-separated list of platforms."
        required: false
        type: string
        default: linux/amd64,linux/arm64/v8

    secrets:
      GH_CONTAINER_REGISTRY_USER:
        description: 'The user to use to login to the GitHub Container Registry.'
        required: true
      GH_CONTAINER_REGISTRY_TOKEN:
        description: 'The token to use to login to the GitHub Container Registry.'
        required: true

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      - uses: actions/checkout@v3
      -
        name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDDHHMMSS
      -
        name: Set Hashed Tag
        env:
          TIMESTAMP: ${{ steps.current-time.outputs.formattedTime }}
        run: |
          echo "BUILD_IMAGE_TAG=$CI_SHA_SHORT-$TIMESTAMP" >> $GITHUB_ENV &&
          echo "BUILD_IMAGE_TAG=$CI_SHA_SHORT-$TIMESTAMP" > /tmp/image_tag.env
      -
        name: Set Hashed Image Full Name
        env:
          TIMESTAMP: ${{ steps.current-time.outputs.formattedTime }}
          IMAGE_NAME: ${{ inputs.image-name }}
        run: |
          echo "BUILD_IMAGE_FULL_NAME=$IMAGE_NAME:$CI_SHA_SHORT-$TIMESTAMP" >> $GITHUB_ENV &&
          echo "BUILD_IMAGE_FULL_NAME=$IMAGE_NAME:$CI_SHA_SHORT-$TIMESTAMP" >> /tmp/image_tag.env
      -
        name: Set Branched Image Full Name
        env:
          TIMESTAMP: ${{ steps.current-time.outputs.formattedTime }}
          IMAGE_NAME: ${{ inputs.image-name }}
        run: echo "BUILD_IMAGE_BRANCH_NAME=$IMAGE_NAME:$CI_REF_NAME" >> $GITHUB_ENV
      -
        name: Set Package Name
        env:
          IMAGE_NAME: ${{ inputs.image-name }}
        run: echo "GHCR_PACKAGE_NAME=$IMAGE_NAME" | sed "s|ghcr.io/$CI_REPOSITORY_OWNER/||" >> $GITHUB_ENV
      -
        name: Set Push Branch List
        env:
          PUSH_BRANCHES: ${{ inputs.push-branches }}
        run: echo "$PUSH_BRANCHES" | jq --raw-output '. | join(",")' | sed 's/^/PUSH_BRANCH_LIST=/' >> $GITHUB_ENV
      -
        name: Install PHP
        uses: shivammathur/setup-php@v2
        if: inputs.build-themes == true
        with:
          php-version: 8.1
          coverage: none
          tools: composer:v2
          extensions: curl,dom,gd,mbstring,posix,yaml,zip
      -
        name: Install dockworker
        if: inputs.build-themes == true
        run: composer install --prefer-dist --no-progress --no-suggest
        shell: bash
      - name: Install Dart Sass
        if: inputs.build-themes == true
        run: |
          wget https://github.com/sass/dart-sass/releases/download/1.62.1/dart-sass-1.62.1-linux-x64.tar.gz
          tar -xzf dart-sass-1.62.1-linux-x64.tar.gz && rm dart-sass-1.62.1-linux-x64.tar.gz
          mv dart-sass /tmp/
      -
        name: Build Themes
        if: inputs.build-themes == true
        shell: 'script -q -e -c "bash {0}"'
        run: SASS_PATH=/tmp/dart-sass/sass vendor/bin/dockworker theme:build-all
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_CONTAINER_REGISTRY_USER }}
          password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}
      - name: Determine Push Tags
        uses: haya14busa/action-cond@v1
        id: fetch-push-tags
        with:
          cond: ${{ contains(fromJSON(inputs.push-branches), github.ref_name) || inputs.push-all-branches == true }}
          if_true: "${{ env.BUILD_IMAGE_FULL_NAME }},${{ env.BUILD_IMAGE_BRANCH_NAME }}"
          if_false: ${{ env.BUILD_IMAGE_FULL_NAME }}
      - name: Determine Protected Tags
        uses: haya14busa/action-cond@v1
        id: fetch-protected-tags
        with:
          cond: ${{ inputs.protected-tags != '' }}
          if_true: "${{ inputs.protected-tags }},${{ env.PUSH_BRANCH_LIST }}"
          if_false: ${{ env.PUSH_BRANCH_LIST }}
      -
        name: Set Protected Tags List
        env:
          PROTECTED_TAGS: ${{ steps.fetch-protected-tags.outputs.value }}
        run: echo "PROTECTED_TAG_LIST=$PROTECTED_TAGS" | sed 's/,$//g' >> $GITHUB_ENV
      -
        env:
          TIMESTAMP: ${{ steps.current-time.outputs.time }}
        uses: docker/build-push-action@v4
        with:
          provenance: false
          pull: true
          push: true
          platforms: ${{ inputs.platforms}}
          context: .
          file: ./Dockerfile
          tags: ${{ steps.fetch-push-tags.outputs.value }}
          build-args: |
            BUILD_DATE=$TIMESTAMP
            VCS_REF=${{ env.CI_REF_NAME }}
            VERSION=${{ env.BUILD_IMAGE_TAG }}
      - name: Delete images older than a week, keeping at least 3
        if: inputs.cleanup-old-images == true
        uses: snok/container-retention-policy@v2
        with:
          image-names: ${{ env.GHCR_PACKAGE_NAME }}
          cut-off: A week ago UTC
          account-type: org
          org-name: ${{ env.CI_REPOSITORY_OWNER }}
          skip-tags: ${{ env.PROTECTED_TAG_LIST }}
          keep-at-least: 3
          untagged-only: false
          token: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}
          token-type: github-token
      -
        uses: actions/upload-artifact@v3
        with:
          name: build-image-tag
          path: /tmp/image_tag.env
