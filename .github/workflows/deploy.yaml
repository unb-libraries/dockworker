name: Build Image and Push, then Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      branch-env-map:
        description: 'A mapping of branches-to-k8s-namespaces. JSON dictionary format.'
        required: true
        type: string
      deploy-branches:
        description: 'A list of branches that should be deployed to kubernetes cluster. JSON list format.'
        required: true
        type: string
      k8s-deployment-name:
        description: 'The name of the kubernetes deployment to update.'
        required: true
        type: string
      notify:
        description: 'Whether or not to send notifications within this workflow.'
        type: boolean
        default: true
        required: false
      push-branches:
        description: 'A list of branches that should be pushed to the container registry. JSON list format.'
        required: true
        type: string
    secrets:
      KUBE_CONFIG:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  notify-start:
    name: Notify of Start
    if: always() && ${{ inputs.notify }}
    uses: unb-libraries/dockworker/.github/workflows/notify-start.yaml@6.x
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-push-images:
    uses: unb-libraries/dockworker/.github/workflows/build-push/workflow.yaml@6.x
    with:
      notify: false
      push-branches: ${{ inputs.push-branches }}

  deploy-image-to-k8s:
    if:
      contains(fromJSON(inputs.deploy-branches), github.ref_name)
    name: Deploy New Image to Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: [build-push-images]
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      -
        name: Retrieve Built Image Tag
        uses: actions/download-artifact@v3
        with:
          name: build-image-tag
          path: /tmp
      -
        name: Set Built Image Tag Locally
        run: cat /tmp/image_tag.env >> $GITHUB_ENV
      -
        name: Write Deployment Namespaces To Local
        run: echo '${{ inputs.branch-env-map }}' > /tmp/deployment_namespaces.json
      -
        name: Set Deployment Namespace
        run: echo "DEPLOYMENT_NAMESPACE=$(jq -r '.${{ github.ref_name }}' /tmp/deployment_namespaces.json)" >> $GITHUB_ENV
      - uses: azure/setup-kubectl@v3
        name: Install Kubectl
        with:
          version: 'v1.26.2'
        id: install-kubectl
      - uses: azure/k8s-set-context@v3
        name: Set Kubectl Context
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
        id: setcontext-kubectl
      -
        name: Update Image In Kubernetes Deployment
        run: |
          kubectl set image "deployment/$DEPLOYMENT_NAME" "$DEPLOYMENT_NAME=$DEPLOYMENT_IMAGE" --namespace="$DEPLOYMENT_NAMESPACE"
        env:
          DEPLOYMENT_IMAGE: ${{ env.BUILD_IMAGE_FULL_NAME }}
          DEPLOYMENT_NAME: ${{ inputs.k8s-deployment-name }}
          DEPLOYMENT_NAMESPACE: ${{ env.DEPLOYMENT_NAMESPACE }}
      -
        name: Wait For Deployment To Finish
        run: |
          kubectl rollout status deployment "$DEPLOYMENT_NAME" --namespace="$DEPLOYMENT_NAMESPACE"
        env:
          DEPLOYMENT_NAME: ${{ inputs.k8s-deployment-name }}
          DEPLOYMENT_NAMESPACE: ${{ env.DEPLOYMENT_NAMESPACE }}

  notify-conclusion:
    name: Notify of Conclusion
    uses: unb-libraries/dockworker/.github/workflows/notify-conclusion.yaml@6.x
    needs: [ deploy-image-to-k8s ]
    if: always() && ${{ inputs.notify }}
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
